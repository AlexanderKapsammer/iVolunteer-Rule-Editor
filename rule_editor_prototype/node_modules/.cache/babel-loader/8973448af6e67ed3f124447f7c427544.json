{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\UniUser\\\\Desktop\\\\ReactPrototype\\\\rule_editor_prototype\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\UniUser\\\\Desktop\\\\ReactPrototype\\\\rule_editor_prototype\\\\src\\\\App.js\";\nimport React from \"react\";\nimport RuleName from \"./formElements/RuleName\";\nimport Conditions from \"./formElements/Conditions\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      ruleName: \"\",\n      ruleConditions: [{\n        conditionType: \"\",\n        conditionCount: 1,\n        conditionObject: \"\"\n      }, {\n        conditionType: \"\",\n        conditionCount: 1,\n        conditionObject: \"hallo\"\n      }]\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleAddCondition = this.handleAddCondition.bind(this);\n    this.handleRemoveCondition = this.handleRemoveCondition.bind(this);\n    this.handleConditionsChange = this.handleConditionsChange.bind(this);\n    this.createRule = this.createRule.bind(this);\n  }\n\n  handleChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    this.setState(() => {\n      return {\n        [name]: value\n      };\n    });\n  }\n\n  handleAddCondition() {\n    let newRuleConditions = this.state.ruleConditions.slice();\n    newRuleConditions.push({\n      conditionType: \"\",\n      conditionCount: 1,\n      conditionObject: \"\"\n    });\n    this.setState({\n      ruleConditions: newRuleConditions\n    });\n  }\n\n  handleRemoveCondition(event) {\n    const conditionindex = event.target.getAttribute(\"conditionindex\");\n    let newRuleConditions = this.state.ruleConditions.slice();\n    newRuleConditions.splice(conditionindex, 1);\n    this.setState({\n      ruleConditions: newRuleConditions\n    });\n  }\n\n  handleConditionsChange(event) {\n    const _event$target2 = event.target,\n          name = _event$target2.name,\n          value = _event$target2.value;\n    const conditionindex = event.target.getAttribute(\"conditionindex\");\n    let newRuleConditions = this.state.ruleConditions.slice();\n\n    if (name === \"conditionCount\" && value < 1) {\n      alert(\"The count must be at least 1!\");\n      newRuleConditions[conditionindex] = _objectSpread({}, newRuleConditions[conditionindex], {\n        conditionCount: 1\n      });\n    } else {\n      newRuleConditions[conditionindex] = _objectSpread({}, newRuleConditions[conditionindex], {\n        [name]: value\n      });\n    }\n\n    this.setState({\n      ruleConditions: newRuleConditions\n    });\n  }\n\n  createRule() {\n    for (let i = 0; i < this.state.ruleConditions.length; i++) {\n      if (this.state.ruleConditions[i].conditionType === \"\" || this.state.ruleConditions[i].conditionObject === \"\" || this.state.ruleName === \"\") {\n        alert(\"Complete filling in the form!\");\n        return;\n      }\n    } // create drools file and export it\n    // just for displaying data\n\n\n    let message = \"New rule name: \" + this.state.ruleName + \"\\n\\n\";\n\n    for (let i = 0; i < this.state.ruleConditions.length; i++) {\n      message += \" \" + (i + 1).toString() + \".  \" + this.state.ruleConditions[i].conditionType + \":   \" + this.state.ruleConditions[i].conditionCount + \" \" + this.state.ruleConditions[i].conditionObject + \"\\n\";\n    }\n\n    alert(message);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Ivolunteer rule editor prototype\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(RuleName, {\n      value: this.state.ruleName,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(Conditions, {\n      onAdd: this.handleAddCondition,\n      ruleConditions: this.state.ruleConditions,\n      onConditionsChange: this.handleConditionsChange,\n      onSingleRemove: this.handleRemoveCondition,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.createRule,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"create rule\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\UniUser\\Desktop\\ReactPrototype\\rule_editor_prototype\\src\\App.js"],"names":["React","RuleName","Conditions","App","Component","constructor","state","ruleName","ruleConditions","conditionType","conditionCount","conditionObject","handleChange","bind","handleAddCondition","handleRemoveCondition","handleConditionsChange","createRule","event","target","name","value","setState","newRuleConditions","slice","push","conditionindex","getAttribute","splice","alert","i","length","message","toString","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport RuleName from \"./formElements/RuleName\";\r\nimport Conditions from \"./formElements/Conditions\";\r\n\r\nclass App extends React.Component\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state = {\r\n            ruleName: \"\",\r\n            ruleConditions: [\r\n                {\r\n                    conditionType: \"\",\r\n                    conditionCount: 1,\r\n                    conditionObject: \"\"\r\n                },\r\n                {\r\n                    conditionType: \"\",\r\n                    conditionCount: 1,\r\n                    conditionObject: \"hallo\"\r\n                }\r\n            ]\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleAddCondition = this.handleAddCondition.bind(this);\r\n        this.handleRemoveCondition = this.handleRemoveCondition.bind(this);\r\n        this.handleConditionsChange = this.handleConditionsChange.bind(this);\r\n        this.createRule = this.createRule.bind(this);\r\n    }\r\n\r\n    handleChange(event)\r\n    {\r\n        const{name, value} = event.target;\r\n        this.setState(() => { return( {[name]: value} ); });\r\n    }\r\n    handleAddCondition()\r\n    {\r\n        let newRuleConditions = this.state.ruleConditions.slice();\r\n        newRuleConditions.push( {\r\n            conditionType: \"\",\r\n            conditionCount: 1,\r\n            conditionObject: \"\"\r\n        } );\r\n        this.setState({ruleConditions: newRuleConditions})\r\n    }\r\n    handleRemoveCondition(event)\r\n    {\r\n        const conditionindex = event.target.getAttribute(\"conditionindex\");\r\n        let newRuleConditions = this.state.ruleConditions.slice();\r\n        newRuleConditions.splice(conditionindex, 1);\r\n        this.setState({ruleConditions: newRuleConditions});\r\n    }\r\n    handleConditionsChange(event)\r\n    {\r\n        const{name, value} = event.target;\r\n        const conditionindex = event.target.getAttribute(\"conditionindex\");\r\n        let newRuleConditions = this.state.ruleConditions.slice();\r\n        if(name === \"conditionCount\" && value < 1)\r\n        {\r\n            alert(\"The count must be at least 1!\");\r\n            newRuleConditions[conditionindex] = {\r\n                ...newRuleConditions[conditionindex],\r\n                conditionCount: 1\r\n            }\r\n        }\r\n        else\r\n        {\r\n            newRuleConditions[conditionindex] = {\r\n                ...newRuleConditions[conditionindex],\r\n                [name]: value\r\n            }\r\n        }\r\n        this.setState({ruleConditions: newRuleConditions});\r\n    }\r\n\r\n    createRule()\r\n    {\r\n        for(let i = 0; i < this.state.ruleConditions.length; i++)\r\n        {\r\n            if(this.state.ruleConditions[i].conditionType === \"\" || this.state.ruleConditions[i].conditionObject === \"\" || this.state.ruleName === \"\")\r\n            {\r\n                alert(\"Complete filling in the form!\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        // create drools file and export it\r\n\r\n        // just for displaying data\r\n        let message = \"New rule name: \" + this.state.ruleName + \"\\n\\n\";\r\n        for(let i = 0; i < this.state.ruleConditions.length; i++)\r\n        {\r\n            message += \" \" + (i + 1).toString() + \".  \" + this.state.ruleConditions[i].conditionType + \":   \" + this.state.ruleConditions[i].conditionCount + \" \" + this.state.ruleConditions[i].conditionObject + \"\\n\";\r\n        }\r\n        alert(message);\r\n    }\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <div>\r\n                <h1>Ivolunteer rule editor prototype</h1>\r\n                <hr />\r\n                <RuleName value={this.state.ruleName} onChange={this.handleChange}/>\r\n                <hr />\r\n                <Conditions \r\n                    onAdd={this.handleAddCondition} \r\n                    ruleConditions={this.state.ruleConditions}\r\n                    onConditionsChange={this.handleConditionsChange}\r\n                    onSingleRemove={this.handleRemoveCondition}\r\n                />\r\n                <hr />\r\n                <button onClick={this.createRule}>create rule</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}